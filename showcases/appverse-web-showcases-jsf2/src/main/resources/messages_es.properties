#Copyright (c) 2012 GFT Appverse, S.L., Sociedad Unipersonal.
#
# This Source Code Form is subject to the terms of the Mozilla Public 
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/. 
#
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the conditions of the Mozilla Public License v2.0 
# are met.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. EXCEPT IN CASE OF WILLFUL MISCONDUCT OR GROSS NEGLIGENCE, IN NO EVENT
# SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.

# ==============================================================================
# Component Errors
# ==============================================================================
javax.faces.component.UIInput.CONVERSION=Ha ocurrido un error de conversión
javax.faces.component.UIInput.REQUIRED=Este campo es obligatorio
javax.faces.component.UIInput.UPDATE=Ha ocurrido un error enviando los datos
javax.faces.component.UISelectOne.INVALID=Valor inválido
javax.faces.component.UISelectMany.INVALID=Valor inválido

# ==============================================================================
# Validator Errors
# ==============================================================================

javax.faces.validator.NOT_IN_RANGE=El valor introducido no está dentro del rango esperado: {0} y {1}
javax.faces.validator.DoubleRangeValidator.MAXIMUM=El valor es mayor que el máximo admitido: ''{0}''
javax.faces.validator.DoubleRangeValidator.MINIMUM=El valor es menor que el mídnimo admitido: ''{0}''
javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE=El valor introducido no está dentro del rango esperado: {0} y {1}
javax.faces.validator.DoubleRangeValidator.TYPE=El valor no es del tipo esperado
javax.faces.validator.LengthValidator.MAXIMUM=El valor es mayor que el máximo admitido: ''{0}''
javax.faces.validator.LengthValidator.MINIMUM=El valor es menor que el mídnimo admitido: ''{0}''
javax.faces.validator.LongRangeValidator.MAXIMUM=El valor es mayor que el máximo admitido: ''{0}''
javax.faces.validator.LongRangeValidator.MINIMUM=El valor es menor que el mídnimo admitido: ''{0}''
javax.faces.validator.LongRangeValidator.NOT_IN_RANGE=El valor introducido no está dentro del rango esperado: {0} y {1}
javax.faces.validator.LongRangeValidator.TYPE=El valor no es del tipo esperado
javax.faces.converter.DateTimeConverter.DATE=Por favor, introduzca una fecha correcta
javax.faces.converter.DateTimeConverter.DATE_detail=Por favor, introduzca una fecha correcta. Ejemplo: {1}
javax.faces.converter.IntegerConverter.INTEGER=Este campo debe ser numí9rico
javax.validation.constraints.Future.message=El campo debe ser una fecha futura

# ==============================================================================
# Calendar
# ==============================================================================

RICH_CALENDAR_APPLY_LABEL=Aplicar
RICH_CALENDAR_TODAY_LABEL=Hoy
RICH_CALENDAR_CLOSE_LABEL=Cerrar
RICH_CALENDAR_OK_LABEL=Aceptar
RICH_CALENDAR_CLEAN_LABEL=Limpiar
RICH_CALENDAR_CANCEL_LABEL=Cancelar

# ==============================================================================
# Internationalization (internationalization.xhtml)
# ==============================================================================

internationalization.language.title = Internacionalización en JSF2 
internationalization.language.ENGLISH = Inglí9s
internationalization.language.CATALAN = Catalán
internationalization.language.SPANISH = Castellano
internationalization.firstFacet = Internationaliza tu aplicación JSF2
internationalization.definition1 = JSF2 (JSF) como muchos productos basados en Java, está diseñado para que la internacionalización sea fácil. Una de las caracterídsticas principales son los Message Bundles. Message Bundles son simples ficheros de texto (property files) compuestos de pares clave/valor. Son muy fáciles de usar. Lo más importante es tener un fichero por cada idioma soportado, por ejemplo uno en Inglí9s, otro en Catalán, Catellano o cualquier otro lenguaje. Se carga un MessageBundle con el locale actual y se obtienen los valores desde ficheros. Puedes añadir ficheros para otros lenguajes en cualquier momento. Para internacionalizar tu aplicación JSF2 necesitarás seguir los siguientes pasos. 
internationalization.secondFacet = Declara tu fichero de recursos (properties files)
internationalization.definition2 = Puedes declarar ficheros de recursos de dos maneras.
internationalization.item1 = La manera más sencilla es proporcionar la declaración en tu faces-config.xml como a continuación:
internationalization.item2 = En vez de utilizar una declaración de fichero de recursos, puedes añadir el elemento f:load-Bundle a cada página SF page que necesite el recurso, asíd:
internationalization.definition3 = En ambos casos, los mensajes en los ficheros de recursos son accesibles a traví9s de una variable map con nombre "msg". El fichero de recursos debe acabar con .properties (messages.properties).
 
internationalization.thirdFacet = Declara tu local por defecto y los soportados
internationalization.definition4 = En tu faces-config.xml:

internationalization.fourthFacet = Cómo utilizar un fichero de recursos
internationalization.definition5 = En cualquier fichero .jsf utiliza la variable definida en faces-config.xml o con <f:loadBundle>. La variable aquíd se llama "msg". Dicha variable se ha de utilizar con una clave definida en un fichero de properties. Por ejemplo, para obtener la cadena localizada "name" puedes hacerlo asíd:
internationalization.definition6 = Si quieres utilizar cadenas localizadas en tu managed beans:
internationalization.item3 = Obtiene el locale utilizado por tu navegador :
internationalization.item4 = Carga del fichero de recursos asociado con este locale, utilizando el path completo y el base name (tambií9n podrída utilizarse uno relativo):
internationalization.item5 = Puedes obtener cualquier valor utilizando su clave en el fichero de properties :

internationalization.fifthFacet = Crea tu Locale Bean
internationalization.definition7 = Puedes utilizar cadenas localizadas e internacionalizadas independientemente del lenguaje por defecto de tu navegador.
internationalization.item6 = Crea tu propio locale locale managed bean:
internationalization.item7 = Crea una página JSF para mostrar algunas cadenas internacionalizadas y adjunta por ejemplo tres links (Inglí9s, Catalán y Castellano) para cambiar el lenguaje de tu aplicación de la siguiente manera.
internationalization.item8 = Como podrás ver, la vista actual cambia ahora dependiendo del lenguaje seleccionado. Para internacionalizar toda la aplicación, tienes que añaadir el código siguiente en cualquier página en la que lo necesites o en una plantilla:
internationalization.definition8 = Ahora el lenguaje de las páginas depende del lenguaje seleccionado.

# ==============================================================================
# Validations (errGeneratorChck.xhtml, simpleValidation.xhtml, crossFieldValidation.xhtml)
# ==============================================================================

validations.username = Nombre de usuario
validations.lastName = Apellido
validations.email = Correo electrónico
validations.password = Contraseña
validations.inidnidate = Fecha expedición del DNI
validations.enddnidate = Fecha caducidad del DNI
validations.connDB = Conectar con la BD
validations.submit = Enviar
validations.viewManagedBean = Ver UserBean.java
validations.viewUserVO = UserVO.java
validations.viewJSF = Ver código

# ==============================================================================
# Welcome page (welcome.xhtml)
# ==============================================================================
main.text = El objetivo de este caso de uso es ayudarte a iniciar una aplicación basada \
en Appverse Web y front end JSF2. Serás capaz de construir tu aplicación usando los \
componentes básicos / siguiendo las recomendaciones que este showcase (basado en la librerída de componentes JavaServer \
Faces, Rich Faces) te ofrece. Este caso de uso muestra:
main.text.layout = Layout recomendado para el projecto
main.text.springJsf = Configuración inicial de las tecnologídas Spring y JSF2
main.text.exceptions = Gestión de excepciones
main.text.styles = Estilos (Skins, Css)
main.text.validations = Validaciones JSR 303 
main.text.remotePaging = Paginación remota
main.text.uploadFiles = Subida de ficheros
main.text.internationalization = Internacionalización

main.links = Vídnculos rápidos
main.templating = Plantillas
main.gap = Acerca de este caso de uso
main.i18n = I18N
main.facelets = Facelets
main.remotePagingGrid = Tabla con paginación remota
# ==============================================================================
# Left Menu (menu.xhtml)
# ==============================================================================

menu.group.exceptionHandling = Gestión de Excepciones
menu.group.exceptionHandling.uncheckedExceptions = Excepciones Unchecked
menu.group.exceptionHandling.checkedExceptions = Excepciones Checked
menu.group.exceptionHandling.errorPage = Páginas de error
menu.group.exceptionHandling.errorPage.httpErrorCodes = Gestión automática de errores HTTP
menu.group.exceptionHandling.errorPage.avoidMapping = Evitar mapeo de páginas JSF como páginas de error generales
menu.group.exceptionHandling.lifecycle = Implentación de un gestor de excepciones de aplicación
menu.group.styling = Estilos
menu.group.styling.description = Descripción
menu.group.styling.configuration = Configuración
menu.group.styling.css = Skins + Css
menu.group.faceletsTemplates =  Plantillas (facelets)
menu.group.validations = Validaciones
menu.group.validations.simpleValidations = Validaciones simples
menu.group.validations.complexValidations = Validaciones de múltiples campos
menu.group.internationalization = Internacionalización
menu.group.components = Componentes
menu.group.components.fileUpload = Subida de archivos

# ==============================================================================
# General messages
# ==============================================================================
general.description = Descripción
general.close = Cerrar
general.code = Código:
general.configuration = Configuración
general.renderedOutput = Salida renderizada
general.with = con
general.print = Imprimir
general.share = Compartir
general.search = Buscar
general.cancel = Cancelar
general.store = Guardar
general.logout = Logout

# ==============================================================================
# Footer
# ==============================================================================

footer.basedOn = Layout basado en

# ==============================================================================
# Unchecked Errors (errGeneratorUnch.xhtml)
# ==============================================================================
uncheckedErrors.firstFeature = Representa fallos en un programa (bugs) - por ejemplo parámetros inválidos pasados a un mí9todo no privado. Cogido de Java Programming Language, por Gosling, Arnold y Homes: "Excepciones no controladas en ejecución representan condiciones que, generalmente hablando, reflejan errores en la lógica de tu programa y no son recuperables de una manera razonable en tiempo de ejecución".
uncheckedErrors.secondFeature = Son subclases de RuntimeException y normalmente implementadas usando IllegalArgumentException, NullPointerException, o IllegalStateException
uncheckedErrors.thirdFeature = Un mí9todo no está obligado a establecer una polídtica para excepciones unchecked que su implementación lanza 
uncheckedErrors.invalidAction = Acción inválida
uncheckedErrors.errorTest = Test de error
uncheckedErrors.runtimeError = Test de error de ejecución

# ==============================================================================
# Checked Errors (errGeneratorChck.xhtml)
# ==============================================================================
checkedErrors.firstFeature = Representa condiciones inválidas en algún punto fuera del control inmediato del programa (entrada de usuario inválida, problemas de base de datos, problemas de red, ficheros inexistentes)
checkedErrors.secondFeature = Son subclases de Exception
checkedErrors.thirdFeature = Un mí9todo está obligado a establecer una polídtica para todas las excepciones 'checked' lanzadas por su implementación (bien pasar la excepción a un nivel superior o gestionarla)
checkedErrors.timeoutError = Test Timeout Error
checkedErrors.sampleFormError = Test error en formulario

# ==============================================================================
# Error Pages (errGeneratorErrCod.xhtml)
# ==============================================================================
errorPages.statusCodes.facet = Como gestionar errores HTTP en las páginas
errorPages.statusCodes.showHTTPStatusCodes = Mostrar códigos de estado HTTP
errorPages.statusCodes.definitionHeader = La mejor manera de establecer páginas por defecto para errores HTTP (404, 500, 503...) en tu aplicación web es definirlos en tu web.xml de la siguiente manera :
errorPages.statusCodes.definition = Tu aplicación web muestra el contenido de la página custom error404.xhtml (en vez de la página de error 404 por defecto) cuando la aplicación redirige a un recurso inexistente o se escribe un destino inexistente en la barra de URL. Esto solo aplica para recursos que no terminan en extensión *.jsf. Para gestionar los *.jsf desconocidos, es necesario aplicar gestión de excepciones JSF2 centralizada  en tu aplicación web para gestionar la excepción FacesFileNotFoundException. Puedes ver cómo hacerlo en la sección correspondiente a CustomExceptionHandler.
errorPages.statusCodes.resumeHTTPStatusCodes = Resumen de códigos de estado HTTP
errorPages.statusCodes.HTTPStatusCode = Código de estado HTTP
errorPages.statusCodes.statusCode.continue = Continue
errorPages.statusCodes.statusCode.switchingProtocols = Switching Protocols
errorPages.statusCodes.statusCode.ok = OK
errorPages.statusCodes.statusCode.created = Created
errorPages.statusCodes.statusCode.accepted = Accepted
errorPages.statusCodes.statusCode.nonAuthoritativeInformation = Non-Authoritative Information
errorPages.statusCodes.statusCode.noContent = No Content
errorPages.statusCodes.statusCode.resetContent = Reset Content
errorPages.statusCodes.statusCode.partialContent = Partial Content
errorPages.statusCodes.statusCode.multipleChoices = Multiple Choices
errorPages.statusCodes.statusCode.movedPermanently = Moved Permanently
errorPages.statusCodes.statusCode.movedTemporarily = Moves Temporarily
errorPages.statusCodes.statusCode.seeOther = See Other
errorPages.statusCodes.statusCode.notModified = Not modified 
errorPages.statusCodes.statusCode.useProxy = Use Proxy
errorPages.statusCodes.statusCode.badRequest = Bad Request
errorPages.statusCodes.statusCode.unauthorized = Unauthorized
errorPages.statusCodes.statusCode.paymentRequired = Payment required
errorPages.statusCodes.statusCode.forbidden = Forbidden
errorPages.statusCodes.statusCode.notFound = Not Found
errorPages.statusCodes.statusCode.methodNotAllowed = Method Not Allowed
errorPages.statusCodes.statusCode.notAcceptable = Not Acceptable
errorPages.statusCodes.statusCode.proxyAuth = ProxyAuthentication Required
errorPages.statusCodes.statusCode.requestTimeout = Request Time-Out
errorPages.statusCodes.statusCode.conflict = Conflict
errorPages.statusCodes.statusCode.gone = Gone
errorPages.statusCodes.statusCode.lengthRequired = Length Required
errorPages.statusCodes.statusCode.preconditionFailed = Precondition Failed
errorPages.statusCodes.statusCode.requestEntityLarge = Request Entity Too Large
errorPages.statusCodes.statusCode.requestUrlLarge = Request-URL Too Large
errorPages.statusCodes.statusCode.unsupportedMediaType = Unsupported Media Type
errorPages.statusCodes.statusCode.serverError = Server Error
errorPages.statusCodes.statusCode.notImplemented = Not Implemented
errorPages.statusCodes.statusCode.badGateway = Bad Gateway
errorPages.statusCodes.statusCode.outOfResources = Out of resources
errorPages.statusCodes.statusCode.gatewayTimeout = Gateway Time-Out
errorPages.statusCodes.statusCode.httpVersionNotSupported = HTTP Version not supported
errorPages.statusCodes.pageNotFound = Page Not Found (404)
errorPages.statusCodes.badLink404 = Bad Link (404)
errorPages.statusCodes.serviceUnavailable = Service Unavailable (503)
errorPages.statusCodes.badLink403 = Forbidden Link.html (403)

# ==============================================================================
# Application Error (applicationError.xhtml)
# ==============================================================================
applicationError.heading = Error de aplicación
applicationError.contactItTeam = Por favor, contacte con IT y proporcione la siguiente información tí9cnica
applicationError.cause = Causa de error
applicationError.stackTrace = Error stackTrace

# ==============================================================================
# Custom Exception Handler (errGeneratorCode.xhtml)
# ==============================================================================

customExceptionHandler.definition1 = Implementando un Custom Exception Handler, la aplicación podrá gestionar diferentes excepciones de manera centralizada y mostrar las excepciones en una o varias págians de error. Para poder crear una gestión de excepciones propia es necesario:
customExceptionHandler.definition2 = Crear un gestor de excepciones propio que gestiona las excepciones de aplicación. Esta clase handler debe exteneder la clase handling wrapper class (como ExceptionHandlerWrapper class).
customExceptionHandler.definition3 = Crear una clase factory para gestión de excepciones propia que es responsable de crear las instancias de la clase gestor de excepciones. La clase factory ha de extender de JSF ExceptionHandlerFactory class.
customExceptionHandler.definition4 = Finalmente, es necesario registrar la factorída del gestor propio de excepciones en el fichero your faces-config.xml.
customExceptionHandler.definition5 = El mí9todo más importante de la clase CustomExceptionHandler class es el mí9todo handle() que es responsable de gestionar las excepciones JSF de la application. El mí9todo getUnhandledExceptionQueuedEvents() obtiene todas las excepciones que no se han gestionado todavída. Cada objeto en el objeto Iterable retornado por dicho mí9todo representa un objeto ExceptionQueuedEvent. Desde el objeto ExceptionQueuedEvent puedes obtener el objeto ExceptionQueuedEventContext desde el cual puedes obtener el objeto Throwable. Utilizando el objeto Throwable puedes verificar las excepciones que quieres gestionar en tu aplicación.
customExceptionHandler.definition6 = Hay varias maneras de redirigir la respuesta a una página de error de aplicación como dispatch, redirect o utilizando NavigationHandler.
customExceptionHandler.definition7 = A continuación, necesitamos crear CustomExceptionHandlerFactory, la clase factory que es responsable de crear las instancias de la clase CustomExceptionHandler.
customExceptionHandler.definition8 = Finalmente, necesitamos registrar la factorída en el fichero faces-config.xml tal como se muestra a continuación:

# ==============================================================================
# Styling Description (skinDescription.xhtml)
# ==============================================================================

skinDescription.firstFacet = Que son 'skins'?
skinDescription.definition1 = Los skins de aplicación permiten con RichFaces cambiar la apariencia de la aplicación modificando la configuración de colores y decoración de controles y componentes. Tídpicamente la apareciencia de aplicaciones web se gestiona mediante ficheros CSS (Cascading Style Sheet) asociados a la aplicación pero el 'skinning' permite que tener la configuración separada y ser fácilmente editable. Los 'skins' consisten en pequeña, generalizada configuración parametrizada de fuentes y colores que pueden aplicarse a múltiples estilos. Esto evita código repetitivo y duplicación de CSS en los ficheros. Los ficheros CSS no quedan completamente reemplazados: los 'skins' funcionan como un nivel de superior, como una extensión al CSS estándar. Cada 'skin' tiene un conjunto de parametros que se utilizan para definir el tema de la paleta y otros elementos de la interfaz de usuario. Estos parámetros se combinan con declaraciones CSS normales y pueden referenciarse desde CSS utilizando JavaServer Faces Expression Language (EL). Esta funcionalidad 'skinning' de RichFaces tambií9n permite cambiar 'skins' en tiempo de ejecución para que los usuarios puedan personalizar una aplicación al momento.
skinDescription.secondFacet = Uso de 'Skins'
skinDescription.definition2 = RichFaces incluye un conjunto de 'skins' predefinidos. Dichos 'skins' pueden usarse web applications especificando el nombre de 'skin' en el parámetro de contexto org.richfaces.skin en el fichero web.xml. Los 'skins' predefinidos son los siguientes:
skinDescription.definition3 = Para añadir uno de estos 'skins' a tu aplicación, añade el parámetro de contexto org.richfaces.SKIN al descriptor de deploy web.xml:
skinDescription.definition4 = En caso de que necesites resetear todos los estilos y ser completamente responsable del aspecto de tu aplicación, puedes seleccionar un 'skin plano'. Este skin no tiene parámetros de 'skin' y está pensado para embeber componentes RichFaces dentro de proyectos existentes con sus propios estilos.
skinDescription.thirdFacet = Resumen sobre 'Skinning'
skinDescription.definition5 = RichFaces 'skins' están implmentandos siguiendo el siguiente esquema de tres niveles: 
skinDescription.item1 = Hojas de estilo de componentes
skinDescription.definition6 = Se proporcionan hojas de estilo para cada componente. Los parámetros de estilo CSS se mapean a parámetros de 'skin' definidos en el fichero de propiedades del 'skin'. Este mapeo se consigue mediante el uso de ficheros ECSS.
skinDescription.item2 = Ficheros de propiedades de 'Skin'
skinDescription.definition7 = Los ficheros de propiedades de 'skin' mapean parámetros de 'skin' a constantes de estilo. Las propiedades de 'skin' están definidas en ficheros skin.properties.
skinDescription.item3 = Clases de estilo propias
skinDescription.definition8 = Componentes individuales pueden utilizar el atributo styleClass para redefinir elementos especídficos. Estos componentes utilizan los estilos definidos en un fichero CSS en vez de tener el aspecto estándar para componentes como se define en las hojas ECSS stylesheets.
skinDescription.titleTable = Tabla de parámetros de 'skin'
skinDescription.definition9 = Configuración de parámetros para el skin 'blueSky' muestra los valores por defecto para la configuración de parámetros del skin 'blueSky'. Estos valores aparecen listados en el fichero blueSky.skin.properties.
skinDescription.parameterName = Nombre de parámetro
skinDescription.defaultValue = Valor por defecto

# ==============================================================================
# Styling Configuration (skinConfiguration.xhtml)
# ==============================================================================

skinConfiguration.yourSkinSelector = Tu selector de 'skin'
skinConfiguration.changingSkin = Cambio de 'skins' RichFaces en tiempo de ejecución
skinConfiguration.definition1 = Configurando tu aplicación basada en RichFaces para utilizar un 'skin' concreto es muy simple, todo lo que tienes que hacer es configurar tu 'skin' en tu web.xml:
skinConfiguration.definition2 = A veces es deseable cambiar el 'skin' en tiempo de ejecución. Quizás incluso quieras salvar un 'skin' concreto en tus preferencias.
skinConfiguration.item1 = En vez de tener un nombre de 'skin' fijo, es necesario utilizar una expresión EL como a continuación:
skinConfiguration.item2 = skinBean es el nombre del JSF managed bean que necesitas implementar:
skinConfiguration.item3 = Deberídas de inicializar la propiedad 'skin' con el valor de algún 'skin' por defecto. Puedes hacerlo en tu faces-config.xml:
skinConfiguration.item4 = Finalmente, puedes crear un selector para permitir el cmabio de 'skin' en tiempo de ejecución. Aquíd tienes un ejemplo:
skinConfiguration.definition3 = El primer item de este selector (app) representa un 'skin' propio. Necesitas crear todos los 'skins' propios que quieras utilizar con nombre: nameOfSkin.skin.properties. 

# ==============================================================================
# Styling + Css (skinCss.xhtml)
# ==============================================================================

skinCss.firstFacet = Personalización de 'skins'
skinCss.definition1 = Los 'skins' en RichFaces pueden personalizarse en cada uno de estos tres niveles:
skinCss.item1 = Ficheros de propiedades de 'Skin'
skinCss.definition2 =  Las interfaces de aplicación pueden modificarse alterando los valores de los parámetros de 'skin' en el propio 'skin'. Edita los valores constantes definidos en el fichero skin.properties para cambiar el estilo de cada componente mapado a dicha propiedad.
skinCss.item2 = Hoja de estilos de componente
skinCss.definition3 = Mapeos y otros atributos de estilos listados en un fichero ECSS de componente pueden editarse. Edita el fichero ECSS para cambiar los estilos de todos los componentes de ese tipo.
skinCss.item3 = Clases de estilos de componente personalizados
skinCss.definition4 = Componentes individuales pueden utilizar el atributo 'styleClass' para utilizar una clase de estilo única. Añade la nueva clase de estilo al CSS de la aplicación y referencialo desde un componente individual con el atributo 'styleClass'.
skinCss.item4 = Sobreescribiendo hojas de estilo en la aplicación
skinCss.definition5 = Puedes cargar hojas de estilo propios utilizando <h:outputStylesheet> para reescribir o extender estilos definidos por una clase de estilo de componentes.
skinCss.info.title = Personalización de 'skins' modificando / extendiendo clases de estilo de componente
skinCss.info.explanation = Si quieres extender / sobreescribir definiciones de hojas de estilo con tus propias hojas de estilo, asegúrate de poner tus definiciones para que se rendericen en el orden correcto de ocurrencia.

skinCss.firstFacet.facet = Ejemplo de skinning simple
skinCss.definition6 = Utilizando cualquier componente, como un panel, sin especificar una clase de estilo se utilizarán los parámetros de 'skin' por defecto para ese componente.
skinCss.definition7 = Cuando se renderiza para mostrar en pnatalla, el panel consite en dos elementos HTML: un elemento <div> contenedor y un elemento <div> para el cuerpo (contenido) del panel. El elemento contenedor para un panel sin styleClass especificado se renderiza de la siguente manera:
skinCss.definition8 = Para personalizar la apariencia del panel acorde al esquema de tres niveles, ajusta los estilos de la siguiente manera:
skinCss.item5 = Cambia las definiciones para los parámetros generalBackgroundColor o panelBorderColor en el 'skin'. Esto provocará que todos los paneles de la aplicación cambien a la nueva configuración.
skinCss.item6 = Redefine la clase rf-p en el CSS de la aplicación. Esto tambií9n causará que todos los paneles de la aplicación cambien a la nueva configuración, aunque el 'skin' en síd mismo no se haya modificado. Ninguna propiedad que no estí9 mapeada a un parámetro de 'skin' deberída de redefinirse de esta manera.
skinCss.item7 = Especifica un atributo styleClass diferente para aplicar estilo a un componente individual. Si se utiliza un atributo styleClass, la clase de estilo especificada se aplica al componente que puede extender o sobreescribir los estilos por defecto.
skinCss.definition9 = La clase de estilo propia se añade al CSS y se aplica al componente cuando se renderiza para mostrarse en pantalla:

skinCss.secondFacet = Soporte para esquinas redondeadas
skinCss.definition10 = Soporte para contornos redondeados en tu 'skin' mediante el parámetro de 'skin' panelBorderRadius. El valor de este parámetro se corresponde a la propiedad CSS 3 border-radius. Esta propiedad CSS 3 es ignorada por navegadores antiguos y el 'skin' degrada a esquinas cuadradas.
skinCss.definition11 = La unidad del parámetro de 'skin' panelBorderRadius han de ser px (pixels) or % (porcentaje).

skinCss.thirdFacet = Ficheros ECSS
skinCss.definition12 = RichFaces utiliza ficheros ECSS  para añadir functionalidad extra al proceso de skinning. Los ficheros ECSS son ficheros CSS files que utilizan Expression Language (EL) para conectar estilos con propiedades de 'skin'.
skinCss.secondFacet.facet = Mappings de estilo ECSS
skinCss.definition13 = El código ECSS para el componente <rich:panel> contiene estilos para el panel y su contenido (body):
skinCss.definition14 = define los estilos del panel:
skinCss.item8 = La propiedad CSS 'background-color' se corresponde con el parámetro de skin 'generalBackgroundColor'
skinCss.item9 = La propiedad CSS 'color' se corresponde con el parámetro skin 'panelBorderColor'.
skinCss.definition15 = define los estilos del contenido del panel (body):
skinCss.item10 = La propiedad CSS 'font-family' se corresponde con el parámetro de 'skin' 'generalFamilyFont'.
skinCss.item11 = La propiedad CSS 'font-size' se corresponde con el parámetro de 'skin' 'generalSizeFont'.
skinCss.item12 = La propiedad CSS 'color' se corresponde con el parámetro de 'skin' 'generalTextColor'.

skinCss.fourthFacet = Controles de 'skinning' estándar
skinCss.definition16 = Controles de HTML estándar que se usan junto con componentes RichFaces Standard HTML incorporan tambií9n un tema para que la interfaz de usuario sea coherente.
skinCss.fourthFacet.firstFacet = Automatic skinning
skinCss.definition17 = Las propiedades de estilo de skinning se aplican automáticamente a controles basados en sus nombres y tipo de atributos. Si los elementos HTML están referenciados en hojas de estilo de skin estándar los controles se mostrarán de acuerdo al mapeo de propiedades de skin.
skinCss.definition18 = A los controles HTML estándar Standard se les aplica 'skin' de esta manera por defecto. Para sobrescribir este comportamiento y evitar que los 'skins' RichFaces se apliquen a controles HTML estándar, añade el parámetro de contexto 'org.richfaces.enableControlSkinning' en el descriptor de deploy web.xml con valor 'false':
skinCss.fourthFacet.secondFacet = Aplicando 'skins' con la clase 'rfs-ctn'
skinCss.definition19 = Las propiedades de estilo de skinning pueden especificarse en una clase CSS separada. Esto no está habilitado por defecto pero puede habilitarse mediante el parámetro de contexto 'org.richfaces.enableControlSkinningClasses' en el descriptor de deploy web.xml:
skinCss.definition20 = Cuando está habilitado, una hoja de estilo con clases predefinidas ofrece una clase CSS especial llamada 'rfs-ctn'. Referencia la clase 'rfs-ctn' desde cualquier elemento contenedor (como por ejemplo el elemento <div>) para aplicar estilo a todos los cotroles HTML que están dentro del contenedor.
skinCss.definition21 = En el CSS tambií9n pueden especificarse controles HTML estandard especídficamente. Utiliza como referencia el fichero /core/impl/src/main/resources/META-INF/resources/skinning_both.ecss en richfaces-ui.jar para ejemplos de clases CSS definidas especialmente con parámetros de skin para controles HTML.

# ==============================================================================
# Templating facelets (skinCss.xhtml)
# ==============================================================================

templating.definition = El tí9rmino Facelets hace referencia al lenguaje de declaración de la vista para tecnologída JavaServer Faces. JavaServer Pages (JSP) technology, previamente utilizada como tecnologída de presentación para JavaServer Faces, no soporta todas las nuevas caracterídsticas disponibles en JavaServer Faces in the Java EE 6 platform. La tecnologída JSP se considera una tecnologída de presentación deprecada para JavaServer Faces. Facelets es una parte de la especificación de JSF y tambií9n la tecnologída de presentación recomendada para aplicaciones basadas en JSF.
templating.component = El tag ui:component inserta una nueva instancia UIComponent en un árbol JSF. Cualquier componente o fragmento de contenido que estí9 fuera de este tag será ignorado por el gestor de vistas Facelets. Cualquier componente o fragmentos de contenido dentro de este tag se añadirán al árbol de componentes como hijos de la instancia UIComponent. Puedes ver tambií9n ui:fragment.
templating.composition = El tag ui:composition es un tag para plantilla que incluye el contenido que a su vez está incluido ne otro Facelet. Cualquier contenido fuera del tag ui:composition será ignorado por el gestor de vistas Facelets. Cualquier contenido dentro del tag ui:composition será incluido cuando otro Facelet incluye la página conteniendo este tag ui:composition. Puedes ver tambií9n ui:include.
templating.debug = El tag ui:debug te permite mostrar información útil sobre el árbol de componentes JSF y las variables en diferentes scopes en tu navegador cuando pruebas tus páginas JSF. El atributo 'hotkey' especifica una combinación de teclas (CTRL + SHIFT + 0 por defecto) para mostrar una ventana de popup conteniendo la información. El tag UI Debug puede habilitarse o deshabilitarse configurando el atributo 'rendered'.
templating.decorate = El tag ui:decorate es un tag para plantilla que decora contenido incluido desde otro Facelet. Cualquier contenido fuera del tag ui:decorate será mostrado por el gestor de vistas Facelets. Cualquier contenido dentro del tag decorate se pasará a la plantilla asociada como parámetro o simplemente se ignorará. Puedes utilizar ui:define tags anidados para pasar contenido con nombre asociado a la plantilla asociada. Puedes ver ui:insert para más información.
templating.define = El tag ui:define es un tag para plantilla que define contenido con nombre asociado para insertarse en una plantilla. El valor del nombre de atributo ha de coincidir con el de un tag ui:insert en la plantilla de destino para el contenido a incluirse por nombre.
templating.fragment = El tag ui:fragment inserta una nueva instancia ui:component dentro del árbol de componentes JSF. Cuaqluier componente o fragmento de contenido fuera de este tag será incluido por el gestor de vistas Facelets. Cualquier componente o fragmento dentro de este tag se añadirá al árbol de componentes como hijos de esta componente de instancia. Puedes ver tambií9n ui:component.
templating.include = El tag ui:include es un tag server-side para inclusión en Facelets. Simplemente incluye el documento al que apunta el atributo "src" como parte de la página JSF actual. El documento includo deberída de utilizar un componente o tag de composición para eliminar lenguaje de marcas innecesario o simplemente podrída contener un fragmento de XHTML or XML.
templating.insert = El tag ui:insert es un tag para plantila que declara un elemento de contenido asociándole un nombre para ser definido por otro Facelet. Puede utilizarse con el tag ui:define para pasar valores entre Facelets.
templating.param =  El tag ui:param se utiliza para pasar objetos como variables por nombre entre Facelets. El nombre del atributo del tag UI Param deberída tener correspondencia con el nombre de atributo de un tag ui:define contenido en ui:composition o ui:decorate en la página plantilla que recibe el objeto. El tag UI Param tag puede tambií9n utilizarse para pasar objetos a otra página utilizando el tag ui:include.
templating.repeat = El tag ui:repeat se utiliza para iterar sobre una colección de objetos expuestos a la página JSF como expresión EL. Está pensado para reemplazar al tag c:forEach de JSTL Core tag library.
templating.remove = El tag ui:remove se utiliza para especificar tags or bloques de contenido que deberídan de ser eliminados de tu página por el gestor de vistas Facelets en tiempo de compilación. Este tag no tiene atributos. Ten en cuenta que el proceso de compilación de Facelets es mucho más rápido que el proces o de compilación JSP  porque no se genera Java bytecode sino que es de hecho generado y compilado en segundo plano cuando visitas la página. El tag ui:remove se utiliza para especificar tags o bloques de contenido que deberídan de ser eliminado de tu página por el gestor de vistas facelets en tiempo de ejecución. Este tag no tiene atributos.

# ==============================================================================
# File Upload (fileUpload.xhtml)
# ==============================================================================

fileUpload.message = Solo se aceptan archivos JPG, GIF, PNG and BMP
fileUpload.panel.title = Información de ficheros subidos al servidor
fileUpload.noFiles = No hay ficheros subidos al servidor actualmente
fileUpload.fileName = Nombre de archivo:
fileUpload.fileLength = Logitud del archivo (bytes):
fileUpload.clearUploadedData = Eliminar datos subidos
fileUpload.viewManagedBean = Ver FileUploadBean.java
fileUpload.viewJSF = Ver código
fileUpload.viewSupportFile = Ver UploadedImage.java

# ==============================================================================
# Remote paging Grid (userGrid.xhtml)
# ==============================================================================

pagingGrid.title = Ejemplo de grid con paginación remota
pagingGrid.tableTitle = Grid paginado de usuarios
pagingGrid.resetSorting = Reset ordenación
pagingGrid.tooltip.edit = Editar
pagingGrid.tooltip.delete = Borrar
pagingGrid.editDetail = Editar detalles de usuario