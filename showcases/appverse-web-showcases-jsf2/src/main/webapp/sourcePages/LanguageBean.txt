package org.appverse.web.showcases.jsf2showcase.frontend.jsf2.bean;

import java.io.Serializable;
import java.util.Locale;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This plain bean shows how to change language in a view. Please note that this
 * is just a very plan example to show how to change locale in views. In a real
 * situation you might want this bean to serve just as a controller delegating
 * in your services layer in order to propagate the user selected locale to the
 * server (for instance to keep it in a single Spring session bean holding the
 * minimal user information that has to be stored in the session).
 */
@ManagedBean
@ViewScoped
public class LanguageBean implements Serializable {

	private static final long serialVersionUID = -1476506861433934516L;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	private String localeCode;
	
	public LanguageBean(){
		super();
		localeCode = "en";
	}

	public String getLocaleCode() {
		return localeCode;
	}

	public void setLocaleCode(String localeCode) {
		this.localeCode = localeCode;
	}

	public void changeLanguage(String language) {
		FacesContext.getCurrentInstance().getViewRoot()
				.setLocale(new Locale(language));
		this.localeCode = language;
	}

	@PostConstruct
	public void initIt() {		
		logger.info("*** BEAN POST CONSTRUCTION: " + this.getClass().toString());
	}

	@PreDestroy
	public void cleanUp() {
		logger.info("*** BEAN POST DESTRUCTION: " + this.getClass().toString());
	}
}